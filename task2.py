from __future__ import annotations
import os
from typing import List, Optional, Dict, Any

from pymongo import MongoClient, ASCENDING
from pymongo.errors import DuplicateKeyError, PyMongoError
from bson import ObjectId


DB_NAME = "cats_db"
COLL_NAME = "cats"


def get_collection():
    uri = os.getenv("MONGODB_URI")
    if not uri:
        raise RuntimeError(
            "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ MONGODB_URI –∑ URI MongoDB Atlas.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: setx MONGODB_URI \"mongodb+srv://user:pass@cluster/?retryWrites=true&w=majority\""
        )
    client = MongoClient(uri)
    db = client[DB_NAME]
    coll = db[COLL_NAME]
    # —ñ–Ω–¥–µ–∫—Å —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ —ñ–º'—è–º –∫–æ—Ç–∞
    coll.create_index([("name", ASCENDING)], unique=True)
    return coll


# ----------- CREATE (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∞ –¥–æ–ø–æ–º—ñ–∂–Ω–∞ –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö) -----------
def seed_example(coll):
    """–î–æ–¥–∞—î –ø—Ä–∏–∫–ª–∞–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —è–∫—â–æ —Ç–∞–∫–æ–≥–æ —ñ–º–µ–Ω—ñ —â–µ –Ω–µ–º–∞—î."""
    example = {
        "name": "barsik",
        "age": 3,
        "features": ["—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–ø—Ü—ñ", "–¥–∞—î —Å–µ–±–µ –≥–ª–∞–¥–∏—Ç–∏", "—Ä—É–¥–∏–π"],
    }
    try:
        coll.insert_one(example)
        print("‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–∏–∫–ª–∞–¥: barsik")
    except DuplicateKeyError:
        pass  # —É–∂–µ —î
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–∏–∫–ª–∞–¥—É: {e}")


# ------------------------------ READ -----------------------------------------
def read_all(coll):
    print("‚Äî –£—Å—ñ –∫–æ—Ç–∏ ‚Äî")
    try:
        for doc in coll.find({}).sort("name", ASCENDING):
            print_doc(doc)
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è: {e}")


def read_by_name(coll, name: str):
    try:
        doc = coll.find_one({"name": name})
        if doc:
            print_doc(doc)
        else:
            print(f"–ö–æ—Ç–∞ –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")


# ------------------------------ UPDATE ---------------------------------------
def update_age_by_name(coll, name: str, new_age: int):
    try:
        res = coll.update_one({"name": name}, {"$set": {"age": new_age}})
        if res.matched_count:
            print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –≤—ñ–∫ '{name}' –Ω–∞ {new_age}.")
        else:
            print(f"–ö–æ—Ç–∞ –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")


def add_feature_by_name(coll, name: str, feature: str):
    """–î–æ–¥–∞—î —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —É–Ω–∏–∫–∞—é—á–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤."""
    try:
        res = coll.update_one({"name": name}, {"$addToSet": {"features": feature}})
        if res.matched_count:
            if res.modified_count:
                print(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É '{feature}' –¥–ª—è '{name}'.")
            else:
                print(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î –¥–ª—è '{name}'.")
        else:
            print(f"–ö–æ—Ç–∞ –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")


# ------------------------------ DELETE ---------------------------------------
def delete_by_name(coll, name: str):
    try:
        res = coll.delete_one({"name": name})
        if res.deleted_count:
            print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å '{name}'.")
        else:
            print(f"–ö–æ—Ç–∞ –∑ —ñ–º'—è–º '{name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")


def delete_all(coll):
    sure = input("–í–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –∑–∞–ø–∏—Å–∏? –ù–∞–¥—Ä—É–∫—É–π—Ç–µ 'YES': ")
    if sure.strip().upper() != "YES":
        print("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return
    try:
        res = coll.delete_many({})
        print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {res.deleted_count} –∑–∞–ø–∏—Å(—ñ–≤).")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")


# ------------------------------ HELPERS --------------------------------------
def print_doc(doc: Dict[str, Any]):
    _id = doc.get("_id")
    name = doc.get("name")
    age = doc.get("age")
    features = doc.get("features", [])
    print(f"* _id: {str(_id)} | name: {name} | age: {age} | features: {features}")


def create_cat(coll, name: str, age: int, features: List[str]):
    """–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É."""
    try:
        coll.insert_one({"name": name, "age": age, "features": features})
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ—Ç–∞ '{name}'.")
    except DuplicateKeyError:
        print(f"–ö—ñ—Ç –∑ —ñ–º'—è–º '{name}' –≤–∂–µ —ñ—Å–Ω—É—î.")
    except PyMongoError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")


# ------------------------------ CLI ------------------------------------------
def menu():
    coll = get_collection()
    # –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ ‚Äî –ø—ñ–¥–∫–∏–Ω–µ–º–æ –ø—Ä–∏–∫–ª–∞–¥
    seed_example(coll)

    actions = {
        "1": lambda: read_all(coll),
        "2": lambda: read_by_name(coll, input("–Ü–º'—è –∫–æ—Ç–∞: ").strip()),
        "3": lambda: update_age_by_name(
            coll,
            input("–Ü–º'—è –∫–æ—Ç–∞: ").strip(),
            int(input("–ù–æ–≤–∏–π –≤—ñ–∫ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ): ").strip()),
        ),
        "4": lambda: add_feature_by_name(
            coll,
            input("–Ü–º'—è –∫–æ—Ç–∞: ").strip(),
            input("–ù–æ–≤–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ").strip(),
        ),
        "5": lambda: delete_by_name(coll, input("–Ü–º'—è –∫–æ—Ç–∞: ").strip()),
        "6": lambda: delete_all(coll),
        "7": lambda: create_cat(
            coll,
            input("–Ü–º'—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞: ").strip(),
            int(input("–í—ñ–∫: ").strip()),
            [s.strip() for s in input("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É: ").split(",") if s.strip()],
        ),
    }

    while True:
        print(
            "\n=== Cats CRUD (MongoDB Atlas) ===\n"
            "1) –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏\n"
            "2) –ó–Ω–∞–π—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º\n"
            "3) –û–Ω–æ–≤–∏—Ç–∏ –≤—ñ–∫ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º\n"
            "4) –î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫–æ—Ç—É\n"
            "5) –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ç–∞ –∑–∞ —ñ–º'—è–º\n"
            "6) –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–ï\n"
            "7) –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞\n"
            "0) –í–∏—Ö—ñ–¥\n"
        )
        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()
        if choice == "0":
            print("–í–∏—Ö—ñ–¥. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!")
            break
        action = actions.get(choice)
        if action:
            try:
                action()
            except ValueError:
                print("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            print("–ù–µ–≤—ñ–¥–æ–º–∞ –æ–ø—Ü—ñ—è. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")


if __name__ == "__main__":
    menu()
